set verbose off

#########################
# EXERCISE 1
#########################

# Parameters
FILENAME = "housing.csv"

# Open the dataset
open "../../data/@FILENAME" --preserve
varlist

# Ex 2: Show first 11 rows
print dataset --byobs --range=1:11

# Ex 3: Create list of features
list features = dataset  # Start with all variables
# Remove target variable and unwanted variables
features -= median_house_value longitude latitude ocean_proximity
print features --byobs --range=1:5
print varnames(features)

# Ex 4: Create dummies for ocean_proximity
list dum = dummify(ocean_proximity, 1)
print varnames(dum)
summary dum --simple

# Ex. 5: # Run OLS regression
list features += dum  # Add dummies to features list
ols median_house_value features

# Ex. 6: Store some model information
scalar r2_score = $rsq
matrix bhat = $coeff
print r2_score
print bhat

# Ex. 7: Plot fitted values vs actuals
series yhat = $yhat

# Create scatter plot of predicted vs actual values
gnuplot yhat median_house_value --output="yhat_vs_actual.png" \
  { set title "Predicted vs Actual House Values";\
    set xlabel "Predicted Value";\
    set ylabel "Actual Value";\
    set grid;\
    set xrange[-200000:600000];\
    set yrange[-200000:600000];}


# Ex. 8: # Function to calculate error metrics
function void calculate_errors(series actual, series predicted)
    # Calculate residuals
    series error = actual - predicted

    # Mean Error (ME)
    scalar me = mean(error)

    # Root Mean Squared Error (RMSE)
    scalar rmse = sqrt(mean(error^2))

    # Mean Absolute Error (MAE)
    scalar mae = mean(abs(error))

    printf "Error Metrics:\n"
    printf "Mean Error (ME): %.2f\n", me
    printf "Root Mean Squared Error (RMSE): %.2f\n", rmse
    printf "Mean Absolute Error (MAE): %.2f\n", mae
end function

# Calculate and print error metrics
calculate_errors(median_house_value, yhat)

# Ex. 9: # Create a histogram of residuals
series residuals = median_house_value - yhat
freq residuals --normal --plot="residuals_histogram.png"

#########################
# EXERCISE 2
#########################

# EX 1: Add squared terms
series median_income_sq = median_income^2
series housing_median_age_sq = housing_median_age^2
#
# Print sample of original and squared variables
print median_income median_income_sq housing_median_age housing_median_age_sq --byobs --range=1:10

# Add new features to the feature list
features += median_income_sq housing_median_age_sq
features   # print variable names in list

# EX 2: # Run OLS with polynomial terms
printf "\nRunning regression with polynomial terms:\n"
ols median_house_value features
# Store R-squared for comparison
scalar r2_score_poly = $rsq

# Compare with previous model
printf "\nModel Comparison:\n"
printf "Basic model R-squared: %.4f\n", r2_score
printf "Polynomial model R-squared: %.4f\n", r2_score_poly
printf "Improvement: %.4f\n", r2_score_poly - r2_score

# Store fitted values
series predicted_poly = $yhat
# Calculate residuals for the polynomial model
series residuals_poly = median_house_value - predicted_poly
#
printf "\n*** Error metrics for the bechmark model ***\n"
calculate_errors(median_house_value, yhat)
#
printf "\n*** Error metrics for the polynomial model ***\n"
calculate_errors(median_house_value, predicted_poly)
#
# Plot histogram of residuals for polynomial model
freq residuals_poly --normal --plot="histogram_residuals_poly.png"

# Scatter plot of predictions
gnuplot predicted_poly median_house_value --output="scatter_predicted_vs_actual_poly.png" \
  { set title "Predicted (polynomial OLS) vs Actual Values";\
    set xlabel "Predicted Value";\
    set ylabel "Actual Value";\
    set grid;\
    set xrange[-200000:600000];\
    set yrange[-200000:600000];}